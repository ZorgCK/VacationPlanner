
package com.rapidclipse.vacationplanner.ui.component;

import com.rapidclipse.framework.server.ui.UIUtils;
import com.rapidclipse.vacationplanner.entities.Trip;
import com.rapidclipse.vacationplanner.microstream.MicroStream;
import com.rapidclipse.vacationplanner.ui.TripView;
import com.rapidclipse.vacationplanner.ui.popup.PopupTrip;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.html.Anchor;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.Image;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;


public class BeanTripItem extends VerticalLayout
{
	
	private final Trip trip;
	
	public BeanTripItem(final Trip trip)
	{
		super();
		this.trip = trip;
		this.initUI();
		
		final Icon car = VaadinIcon.CAR.create();
		car.setSize("12px");
		this.lblDistance.getStyle().set("font-size", "12px");

		final Icon timer = VaadinIcon.TIMER.create();
		timer.setSize("12px");
		this.lblDuration.getStyle().set("font-size", "12px");

		final Icon euro = VaadinIcon.EURO.create();
		euro.setSize("12px");
		this.lblExpensions.getStyle().set("font-size", "12px");
		
		final Icon cloud = VaadinIcon.CLOUD_O.create();
		cloud.setSize("12px");
		this.lblRain.getStyle().set("font-size", "12px");
		
		this.horizontalLayout2.add(car, this.lblDistance, timer, this.lblDuration, euro, this.lblExpensions, cloud,
			this.lblRain);
		
		this.refreshUI();
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #button2}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button2_onClick(final ClickEvent<Button> event)
	{
		new PopupTrip()
			.setTrip(this.trip)
			.setOnOkCallback(() -> this.refreshUI())
			.open();
	}
	
	private void refreshUI()
	{
		this.lblTitle.setText(this.trip.getName());
		this.div3.removeAll();
		this.div3.add(new BeanVoting(this.trip.getRanking()));
		this.lblDescription.setText(this.trip.getDescription());
		
		if(this.trip.getLinkResult() != null)
		{
			this.image.setSrc(this.trip.getLinkResult().getImage());
		}
		
		this.lblDistance.setText(String.valueOf(this.trip.getDurationDistance()));
		this.lblDuration.setText(String.valueOf(this.trip.getDuration()));
		this.lblExpensions.setText(this.trip.getExpences() != null ? String.valueOf(this.trip.getExpences()) : "");
		this.anchor.setHref(this.trip.getLinkResult() != null ? this.trip.getLinkResult().getUrl() : "");
		this.anchor.setText("zur Seite...");
		
		if(this.trip.getRainday() != null)
		{
			if(this.trip.getRainday())
			{
				this.lblRain.setText("Ja");
			}
			else
			{
				this.lblRain.setText("Nein");
			}
		}
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #button}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button_onClick(final ClickEvent<Button> event)
	{
		MicroStream.root().getVacation().getTrips().remove(this.trip);
		MicroStream.storageManager().store(MicroStream.root().getVacation().getTrips());

		final TripView parent = UIUtils.getNextParent(this, TripView.class);
		parent.removeItemFromLayout(this);
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.horizontalLayout  = new HorizontalLayout();
		this.image             = new Image();
		this.verticalLayout2   = new VerticalLayout();
		this.lblTitle          = new Label();
		this.div3              = new Div();
		this.verticalLayout    = new VerticalLayout();
		this.anchor            = new Anchor();
		this.lblDescription    = new Label();
		this.infoContainer     = new HorizontalLayout();
		this.horizontalLayout2 = new HorizontalLayout();
		this.button2           = new Button();
		this.button            = new Button();
		
		this.setSpacing(false);
		this.setPadding(false);
		this.image.setMaxWidth("120px");
		this.verticalLayout2.setPadding(false);
		this.lblTitle.setText("123");
		this.lblTitle.getStyle().set("white-space", "pre-wrap");
		this.lblTitle.getStyle().set("word-wrap", "break-word");
		this.lblTitle.getStyle().set("font-weight", "bold");
		this.lblTitle.getStyle().set("font-size", "18px");
		this.verticalLayout.setSpacing(false);
		this.verticalLayout.setPadding(false);
		this.verticalLayout.getStyle().set("margin-top", "5px");
		this.anchor.setText("Anchor");
		this.lblDescription.setText("Label");
		this.lblDescription.getStyle().set("font-size", "10px");
		this.infoContainer.setDefaultVerticalComponentAlignment(FlexComponent.Alignment.CENTER);
		this.horizontalLayout2.setDefaultVerticalComponentAlignment(FlexComponent.Alignment.CENTER);
		this.button2.addThemeVariants(ButtonVariant.LUMO_SMALL, ButtonVariant.LUMO_PRIMARY);
		this.button2.setIcon(VaadinIcon.PENCIL.create());
		this.button.addThemeVariants(ButtonVariant.LUMO_SMALL, ButtonVariant.LUMO_PRIMARY);
		this.button.setIcon(VaadinIcon.TRASH.create());
		
		this.lblTitle.setWidthFull();
		this.lblTitle.setHeight(null);
		this.div3.setSizeUndefined();
		this.verticalLayout2.add(this.lblTitle, this.div3);
		this.verticalLayout2.setFlexGrow(1.0, this.lblTitle);
		this.image.setWidthFull();
		this.image.setHeight(null);
		this.verticalLayout2.setWidthFull();
		this.verticalLayout2.setHeight("100px");
		this.horizontalLayout.add(this.image, this.verticalLayout2);
		this.anchor.setSizeUndefined();
		this.lblDescription.setSizeUndefined();
		this.verticalLayout.add(this.anchor, this.lblDescription);
		this.horizontalLayout2.setWidth("100px");
		this.horizontalLayout2.setHeight(null);
		this.button2.setSizeUndefined();
		this.button.setSizeUndefined();
		this.infoContainer.add(this.horizontalLayout2, this.button2, this.button);
		this.infoContainer.setVerticalComponentAlignment(FlexComponent.Alignment.CENTER, this.horizontalLayout2);
		this.infoContainer.setFlexGrow(1.0, this.horizontalLayout2);
		this.horizontalLayout.setWidthFull();
		this.horizontalLayout.setHeight("100px");
		this.verticalLayout.setWidthFull();
		this.verticalLayout.setHeight(null);
		this.infoContainer.setWidthFull();
		this.infoContainer.setHeight(null);
		this.add(this.horizontalLayout, this.verticalLayout, this.infoContainer);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.START, this.infoContainer);
		this.setWidthFull();
		this.setHeight(null);
		
		this.button2.addClickListener(this::button2_onClick);
		this.button.addClickListener(this::button_onClick);
	} // </generated-code>

	// <generated-code name="variables">
	private Button           button2, button;
	private Image            image;
	private Anchor           anchor;
	private HorizontalLayout horizontalLayout, infoContainer, horizontalLayout2;
	private VerticalLayout   verticalLayout2, verticalLayout;
	private Label            lblTitle, lblDescription;
	private Div              div3;
	// </generated-code>
	
	// </generated-code>
	private final Label lblDistance   = new Label();
	private final Label lblDuration   = new Label();
	private final Label lblExpensions = new Label();
	private final Label lblRain       = new Label();
	
}
