
package com.rapidclipse.vacationplanner.ui;

import java.io.ByteArrayInputStream;

import com.rapidclipse.vacationplanner.HasTitle;
import com.rapidclipse.vacationplanner.entities.BinaryElement;
import com.rapidclipse.vacationplanner.microstream.MicroStream;
import com.vaadin.flow.component.html.Image;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.FlexLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.upload.Upload;
import com.vaadin.flow.component.upload.receivers.MultiFileMemoryBuffer;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.server.StreamResource;

import elemental.json.Json;


@Route(value = "pictures", layout = MainLayout.class)
public class PicturesView extends VerticalLayout implements HasTitle
{
	private final MultiFileMemoryBuffer multiFileMemoryBuffer = new MultiFileMemoryBuffer();
	
	public PicturesView()
	{
		super();
		this.initUI();
		
		MicroStream.root().getVacation().getFiles().forEach(file -> {
			this.addImage(file);
		});
		
		this.upload.setAcceptedFileTypes(".jpg", ".png");
		this.upload.setReceiver(this.multiFileMemoryBuffer);
		
		this.upload.addFinishedListener((file) -> {
			final BinaryElement binary = new BinaryElement(
				this.multiFileMemoryBuffer.getOutputBuffer(file.getFileName()).toByteArray(),
				file.getFileName(),
				file.getMIMEType());

			MicroStream.root().getVacation().getFiles().add(binary);
			MicroStream.storageManager().store(MicroStream.root().getVacation().getFiles());
			
			this.addImage(binary);
			
			this.upload.getElement().setPropertyJson("files", Json.createArray());
		});
	}
	
	private void addImage(final BinaryElement binary)
	{
		final Image image = new Image();
		image.setWidth("100px");
		image.setHeight("100px");
		image.getElement().getStyle().set("margin", "5px");
		
		final StreamResource streamResource =
			new StreamResource(binary.getFileName(), () -> new ByteArrayInputStream(binary.getBinaryData().get()));
		
		image.setSrc(streamResource);
		this.flexLayout.add(image);
	}

	@Override
	public String getTitle()
	{
		return "Pictures";
	}

	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.upload     = new Upload();
		this.flexLayout = new FlexLayout();

		this.flexLayout.setWrapMode(FlexLayout.WrapMode.WRAP);
		this.flexLayout.setJustifyContentMode(FlexComponent.JustifyContentMode.CENTER);

		this.upload.setWidthFull();
		this.upload.setHeight(null);
		this.flexLayout.setSizeFull();
		this.add(this.upload, this.flexLayout);
		this.setFlexGrow(1.0, this.flexLayout);
		this.setWidthFull();
		this.setHeight(null);
	} // </generated-code>
	
	// <generated-code name="variables">
	private FlexLayout flexLayout;
	private Upload     upload;
	// </generated-code>

}
