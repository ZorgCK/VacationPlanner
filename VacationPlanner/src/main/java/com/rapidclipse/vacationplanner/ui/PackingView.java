
package com.rapidclipse.vacationplanner.ui;

import java.util.List;

import com.rapidclipse.framework.server.data.renderer.RenderedComponent;
import com.rapidclipse.framework.server.ui.ItemLabelGeneratorFactory;
import com.rapidclipse.vacationplanner.HasTitle;
import com.rapidclipse.vacationplanner.entities.Item;
import com.rapidclipse.vacationplanner.entities.Traveller;
import com.rapidclipse.vacationplanner.microstream.MicroStream;
import com.rapidclipse.vacationplanner.ui.column.GenColPackageItem;
import com.rapidclipse.vacationplanner.ui.popup.PopupItem;
import com.vaadin.flow.component.AbstractField.ComponentValueChangeEvent;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.HasValue;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.radiobutton.RadioButtonGroup;
import com.vaadin.flow.data.renderer.TextRenderer;
import com.vaadin.flow.router.Route;


@Route(value = "package", layout = MainLayout.class)
public class PackingView extends VerticalLayout implements HasTitle
{
	public PackingView()
	{
		super();
		this.initUI();

		this.radioButtonGroup.setItems(MicroStream.root().getVacation().getTravellers());
		this.radioButtonGroup.setValue(MicroStream.root().getVacation().getTravellers().get(0));
	}

	@Override
	public String getTitle()
	{
		return "Package";
	}

	/**
	 * Event handler delegate method for the {@link RadioButtonGroup} {@link #radioButtonGroup}.
	 *
	 * @see HasValue.ValueChangeListener#valueChanged(HasValue.ValueChangeEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void
		radioButtonGroup_valueChanged(final ComponentValueChangeEvent<RadioButtonGroup<Traveller>, Traveller> event)
	{
		if(event.getValue() != null)
		{
			this.grid.setItems(event.getValue().getItems());
		}
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #button2}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button2_onClick(final ClickEvent<Button> event)
	{
		final Traveller traveller = this.radioButtonGroup.getValue();
		
		new PopupItem()
			.setTraveller(traveller)
			.onOk(() -> {
				this.grid.setItems(traveller.getItems());
			})
			.open();
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #button}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button_onClick(final ClickEvent<Button> event)
	{
		final Item packItem = this.grid.asSingleSelect().getValue();

		final List<Item> items = this.radioButtonGroup.getValue().getItems();
		items.remove(packItem);

		MicroStream.storageManager().store(items);

		this.grid.getDataProvider().refreshAll();
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.radioButtonGroup = new RadioButtonGroup<>();
		this.grid             = new Grid<>(Item.class, false);
		this.horizontalLayout = new HorizontalLayout();
		this.button           = new Button();
		this.button2          = new Button();

		this.radioButtonGroup.setRenderer(new TextRenderer<>(ItemLabelGeneratorFactory.NonNull(Traveller::getName)));
		this.grid.addColumn(Item::getName).setKey("name").setHeader("Sachen").setSortable(true);
		this.grid.addColumn(Item::getAmount).setKey("amount").setHeader("Anzahl").setSortable(true);
		this.grid.addColumn(RenderedComponent.Renderer(GenColPackageItem::new)).setKey("renderer").setHeader("Status")
			.setSortable(false);
		this.grid.setSelectionMode(Grid.SelectionMode.SINGLE);
		this.horizontalLayout.setJustifyContentMode(FlexComponent.JustifyContentMode.END);
		this.button.setIcon(VaadinIcon.TRASH.create());
		this.button2.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
		this.button2.setIcon(VaadinIcon.PLUS.create());

		this.button.setSizeUndefined();
		this.button2.setSizeUndefined();
		this.horizontalLayout.add(this.button, this.button2);
		this.grid.setSizeFull();
		this.horizontalLayout.setWidthFull();
		this.horizontalLayout.setHeight(null);
		this.add(this.radioButtonGroup, this.grid, this.horizontalLayout);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.CENTER, this.radioButtonGroup);
		this.setFlexGrow(1.0, this.grid);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.START, this.horizontalLayout);
		this.setSizeFull();

		this.radioButtonGroup.addValueChangeListener(this::radioButtonGroup_valueChanged);
		this.button.addClickListener(this::button_onClick);
		this.button2.addClickListener(this::button2_onClick);
	} // </generated-code>

	// <generated-code name="variables">
	private RadioButtonGroup<Traveller> radioButtonGroup;
	private Button                      button, button2;
	private Grid<Item>                  grid;
	private HorizontalLayout            horizontalLayout;
	// </generated-code>

}
