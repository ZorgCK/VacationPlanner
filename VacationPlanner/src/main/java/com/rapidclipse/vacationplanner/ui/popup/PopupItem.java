
package com.rapidclipse.vacationplanner.ui.popup;

import com.rapidclipse.framework.server.data.converter.ConverterBuilder;
import com.rapidclipse.vacationplanner.entities.Item;
import com.rapidclipse.vacationplanner.entities.Traveller;
import com.rapidclipse.vacationplanner.microstream.MicroStream;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.formlayout.FormLayout.FormItem;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.NumberField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.binder.ValidationException;


public class PopupItem extends Dialog
{
	private Traveller  traveller;
	private final Item item = new Item();
	
	Runnable onOkListener = null;
	
	public PopupItem()
	{
		super();
		this.initUI();

		this.binder.readBean(this.item);
	}

	public PopupItem setTraveller(final Traveller traveller)
	{
		this.traveller = traveller;
		return this;
	}
	
	public PopupItem onOk(final Runnable listener)
	{
		this.onOkListener = listener;
		return this;
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #button}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button_onClick(final ClickEvent<Button> event)
	{
		try
		{
			this.binder.writeBean(this.item);

			this.traveller.getItems().add(this.item);
			MicroStream.storageManager().store(this.traveller.getItems());
			
			this.onOkListener.run();
			this.close();
		}
		catch(final ValidationException e)
		{
			e.printStackTrace();
		}
	}

	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.verticalLayout = new VerticalLayout();
		this.form           = new FormLayout();
		this.formItem       = new FormItem();
		this.lblName        = new Label();
		this.txtName        = new TextField();
		this.formItem2      = new FormItem();
		this.lblAmount      = new Label();
		this.nrAmount       = new NumberField();
		this.formItem3      = new FormItem();
		this.lblImportant   = new Label();
		this.chkImportant   = new Checkbox();
		this.binder         = new Binder<>();
		this.button         = new Button();
		
		this.verticalLayout.setPadding(false);
		this.form
			.setResponsiveSteps(new FormLayout.ResponsiveStep("0px", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP));
		this.lblName.setText("Bezeichnung");
		this.txtName.setTabIndex(1);
		this.lblAmount.setText("Anzahl");
		this.nrAmount.setTabIndex(2);
		this.lblImportant.setText("Wichtig");
		this.chkImportant.setTabIndex(3);
		this.chkImportant.setLabel("Checkbox");
		this.button.setText("Ãœbernehmen");
		this.button.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
		
		this.binder.forField(this.txtName).withNullRepresentation("").bind(Item::getName, Item::setName);
		this.binder.forField(this.nrAmount).withConverter(ConverterBuilder.DoubleToInteger().build()).bind(
			Item::getAmount,
			Item::setAmount);
		this.binder.forField(this.chkImportant).withNullRepresentation(false).bind(Item::getImportant,
			Item::setImportant);
		
		this.lblName.setSizeUndefined();
		this.lblName.getElement().setAttribute("slot", "label");
		this.txtName.setWidthFull();
		this.txtName.setHeight(null);
		this.formItem.add(this.lblName, this.txtName);
		this.lblAmount.setSizeUndefined();
		this.lblAmount.getElement().setAttribute("slot", "label");
		this.nrAmount.setWidthFull();
		this.nrAmount.setHeight(null);
		this.formItem2.add(this.lblAmount, this.nrAmount);
		this.lblImportant.setSizeUndefined();
		this.lblImportant.getElement().setAttribute("slot", "label");
		this.chkImportant.setWidthFull();
		this.chkImportant.setHeight(null);
		this.formItem3.add(this.lblImportant, this.chkImportant);
		this.form.add(this.formItem, this.formItem2, this.formItem3);
		this.form.setSizeUndefined();
		this.button.setWidthFull();
		this.button.setHeight(null);
		this.verticalLayout.add(this.form, this.button);
		this.verticalLayout.setSizeFull();
		this.add(this.verticalLayout);
		this.setWidthFull();
		this.setHeight(null);
		
		this.button.addClickListener(this::button_onClick);
	} // </generated-code>
	
	// <generated-code name="variables">
	private FormLayout     form;
	private Checkbox       chkImportant;
	private Button         button;
	private NumberField    nrAmount;
	private VerticalLayout verticalLayout;
	private Label          lblName, lblAmount, lblImportant;
	private Binder<Item>   binder;
	private TextField      txtName;
	private FormItem       formItem, formItem2, formItem3;
	// </generated-code>
	
}
